// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moonlay.Employees.Infrastructure;

namespace Moonlay.Baas.Employees.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20190115101122_AU_EmployeeLeave")]
    partial class AU_EmployeeLeave
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.AttendanceReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CheckInDate");

                    b.Property<DateTimeOffset?>("CheckOutDate");

                    b.Property<TimeSpan?>("Duration");

                    b.Property<Guid>("EmployeeId");

                    b.Property<int>("LocationCheckIn");

                    b.HasKey("Identity");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAbsence");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.DepartmentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Identity");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.EmployeeReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<Guid>("PersonId");

                    b.Property<DateTimeOffset>("RegisDate");

                    b.Property<DateTimeOffset?>("ResignDate");

                    b.Property<int>("Year");

                    b.HasKey("Identity");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.LeaveReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Delegation");

                    b.Property<double>("Duration");

                    b.Property<Guid>("EmployeeId");

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<int>("LeaveType");

                    b.Property<string>("Purpose")
                        .IsRequired();

                    b.Property<double>("Remaining");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<bool>("Status");

                    b.HasKey("Identity");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLeave");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.PositionReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Identity");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.TeamMemberReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EmployeeId");

                    b.Property<Guid>("PositionId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Identity");

                    b.HasIndex("PositionId");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.TeamReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Identity");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.TimesheetReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan?>("Duration");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<Guid>("ProjectAssignId");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<string>("Task")
                        .IsRequired();

                    b.Property<Guid>("TeamMemberId");

                    b.HasKey("Identity");

                    b.ToTable("Timesheet");
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.AttendanceReadModel", b =>
                {
                    b.HasOne("Moonlay.Employees.Domain.ReadModels.EmployeeReadModel", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.LeaveReadModel", b =>
                {
                    b.HasOne("Moonlay.Employees.Domain.ReadModels.EmployeeReadModel", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Moonlay.Employees.Domain.ReadModels.TeamMemberReadModel", b =>
                {
                    b.HasOne("Moonlay.Employees.Domain.ReadModels.PositionReadModel", "Position")
                        .WithMany("TeamMembers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
